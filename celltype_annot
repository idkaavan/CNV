## SingleR (R)

library(Seurat)
library(SingleR)
library(celldex)
library(SummarizedExperiment)
library(dplyr)
library(tidyverse)

ref <- celldex::HumanPrimaryCellAtlasData()

data <- readRDS(".rds")
sobj <- UpdateSeuratObject(object = data)

results <- SingleR(test = as.SingleCellExperiment(sobj), ref = ref, labels = ref$label.main)
sobj$singlr_labels <- results$labels

## count the number of cells in each cluster grouped by cell type
metadata <- sobj@meta.data
cluster_counts <- metadata %>%
  group_by(singlr_labels) %>%
  summarize(Cell_Count = n())
print(cluster_counts)

## plot the labels
DimPlot(sobj, group.by = "singlr_labels", label = FALSE)

## highlight one cell type on umap plot
sobj$Highlight_T <- ifelse(sobj$singlr_labels == "T_cells", "T_cells", "Other")
DimPlot(sobj, group.by = "Highlight_T", cols = c("grey", "blue"))

## extract cells of a certain type
erythroblast_cells <- rownames(sobj@meta.data[sobj$singlr_labels == "Erythroblast", ])
--------------------------------------------------------------------------
##cell typist (python)

import os
import scanpy as sc
import pandas as pd
import celltypist
from celltypist import models

adata = sc.read('.h5ad')

model = models.Model.load(model = 'Immune_All_Low.pkl')

predictions = celltypist.annotate(adata, model = 'Immune_All_Low.pkl', majority_voting = False)

predictions.predicted_labels

adata = predictions.to_adata()

## count the number of cells in each cluster grouped by cell type
metadata = adata.obs
cluster_counts = metadata.groupby('predicted_labels').size().reset_index(name='Cell_Count')
print(cluster_counts)

---------------------------------------------------------------------------------------
## SingleR on raw data before any filtering
library(SingleR)
library(Seurat)
library(Matrix)
library(celldex)
set.seed(1234)
ref <- celldex::HumanPrimaryCellAtlasData()
wrkDir="/path/"
setwd(wrkDir)
resDir="/path/"
dir.create(resDir)
rawdata_paths <- c(
  '/path/
)
samples <- sub("/path/", "", rawdata_paths)
samples <- sub("\\/", "", samples)
readRaw <- function(inputDir) {
    matrix_dir = inputDir
    barcode.path <- paste0(matrix_dir, "barcodes.tsv.gz")
    features.path <- paste0(matrix_dir, "features.tsv.gz")
    matrix.path <- paste0(matrix_dir, "matrix.mtx.gz")
    mat <- readMM(file = matrix.path)
    feature.names = read.delim(features.path, header = FALSE, stringsAsFactors = FALSE)
    barcode.names = read.delim(barcode.path, header = FALSE, stringsAsFactors = FALSE)
    colnames(mat) = barcode.names$V1
    feature.names[duplicated(feature.names[,2]), 2] = paste(feature.names[duplicated(feature.names[,2]), 2], feature.names[duplicated(feature.names[,2]), 1], sep = ":")
    rownames(mat) = feature.names$V2
    dat.r = mat[feature.names[,3] == "Gene Expression", ]
    s <- CreateSeuratObject(dat.r)
    if (nrow(dat.r) < length(feature.names[,3])) {
        isHashAb = 1:nrow(mat) %in% grep("Hash", rownames(mat))
        dat.p = mat[!isHashAb & feature.names[,3] == "Antibody Capture", ]
        s[["ADTraw"]] <- CreateAssayObject(counts = as.matrix(dat.p))
        if (any(isHashAb)) {
            dat.h = mat[isHashAb, ]
            s[["HTOraw"]] <- CreateAssayObject(counts = as.matrix(dat.h))
        }
    }
    return(s)
}

for (i in 1:length(rawdata_paths)) {
    sobj = readRaw(rawdata_paths[i])
    print(paste("Processing sample:", samples[i]))
    print(summary(sobj$nCount_RNA))
    sobj = sobj[, sobj$nCount_RNA > 500]
    sobj = NormalizeData(sobj)
    sobj = FindVariableFeatures(sobj, selection.method = "vst", nfeatures = 3000)
    sobj = ScaleData(sobj)
    sobj = RunPCA(sobj, ndims.print = 1, nfeatures.print = 1)
    results <- SingleR(test = as.SingleCellExperiment(sobj), ref = ref, labels = ref$label.main)
    sobj$singlr_labels <- results$labels
    saveRDS(sobj, file = paste0(resDir, samples[i], "_nofilt_annot.rds"))
}


----------------------------------------------------------------------------------------
## cell typist on raw data before any filtering
wrkDir = "/path/"
resDir = os.path.join(wrkDir, "nonfilter_annotated/")
rawdata_paths = [
    "/path/to/feature-bc-matrix/folder/"
]
samples = [os.path.basename(os.path.normpath(path)) for path in rawdata_paths]
def read_raw_data(matrix_dir):
    matrix_path = os.path.join(matrix_dir, "matrix.mtx.gz")
    features_path = os.path.join(matrix_dir, "features.tsv.gz")
    barcodes_path = os.path.join(matrix_dir, "barcodes.tsv.gz")
    mat = sc.read_mtx(matrix_path).T  # Transpose to make cells rows and genes columns
    features = pd.read_csv(features_path, header=None, sep="\t")
    barcodes = pd.read_csv(barcodes_path, header=None, sep="\t")
    mat.var_names = features[1].values 
    mat.obs_names = barcodes[0].values 
    return mat
for sample, path in zip(samples, rawdata_paths):
    print(f"Processing sample: {sample}")
    adata = read_raw_data(path)
    sc.pp.filter_cells(adata, min_counts=500)
    sc.pp.normalize_total(adata, target_sum=1e4)
    sc.pp.log1p(adata)
    output_path = os.path.join(resDir, f"{sample}.h5ad")
    adata.write(output_path)
    print(f"Saved processed data for {sample} at {output_path}")
# Define the directory with the .h5ad files
data_dir = '/path/'
output_file = '/path/celltypist_nofilt_counts.txt'
h5ad_files = [f for f in os.listdir(data_dir) if f.endswith('.h5ad')]
model = models.Model.load(model='Immune_All_Low.pkl')
with open(output_file, 'w') as f_out:
    f_out.write("Sample\tPredicted_Label\tCell_Count\n")
    for h5ad_file in h5ad_files:
        file_path = os.path.join(data_dir, h5ad_file)
        adata = sc.read(file_path)
        predictions = celltypist.annotate(adata, model=model, majority_voting=False)
        adata = predictions.to_adata()
        metadata = adata.obs
        cluster_counts = metadata.groupby('predicted_labels').size().reset_index(name='Cell_Count')
        print(f"Results for {h5ad_file}:")
        print(cluster_counts)
        print("-" * 50) 

        for _, row in cluster_counts.iterrows():
            f_out.write(f"{h5ad_file}\t{row['predicted_labels']}\t{row['Cell_Count']}\n")
        print(f"Appended results for {h5ad_file} to {output_file}")


