Clear env
rm(list = ls(all.names = TRUE)
gc() #free up memory and report usage

## From .fastq to .bam
## https://biocellgen-public.svi.edu.au/mig_2019_scrnaseq-workshop/processing-raw-scrna-seq-data.html

## How to analyze 10X Single Cell RNA-seq data with R| Seurat Package Tutorial

setwd("")
library(Seurat)
library(dplyr)
library(Matrix) #reading mtx file
library(ggpubr) 
library(ggplot2)
library(tidyverse) #data manipulation
library(AnnotationDbi) #convert ensembl to symbol
library(viridis) #better heatmap color schemes

set.seed(42) #same result for randomization steps

data <- Read10X_h5(filename = ".h")
#or
data <- Read10X(data.dir = "RAW files") #Raw files is a folder containing barcodes, features and matrix .gz)
str(data) #check modalities (list of matrices)
cts <- data@assays$RNA@layers$counts #or wherever the gene expression matrix is stored
sobj <- CreateSeuratObject(counts = cts, min.cells = 3, min.features = 200, project = "leukemia")
DefaultAssay(sobj) <- "RNA"

#QC; low counts, high counts(doublet), percentage of mitochondrial gene(if high mt genes are leaking from the mt, so mayble dying cells)
sobj[['percent_mt']] <- PercentageFeatureSet(sobj, pattern = "^MT-") #stored in metadata of the seurat object
sobj[["percent_ribo"]] <- PercentageFeatureSet(sobj, pattern = "^RPL|^RPS")
view(sobj@meta.data) #low nFeatures indicate dying or empty droplet, high indicate multiplet

VlnPlot(sobj, features =c("nFeature_RNA", "nCount_RNA", "percent_mt"), ncol = 3)
#plot number of genes against the molecules to decide a threshold for removing low quality cells: low right and top left corners of the plot are to be removed
FeatureScatter(sobj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") +
  geom_smooth(method = 'lm')
sobj_filtered <- subset(sobj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent_mt < 5)

#or based on Dufva et al. filtering criteria
sobj_filtered <- subset(sobj, subset = percent_mt < 15 & percent_ribo > 5 & percent_ribo < 50 & 
                               nCount_RNA > 700 & nFeature_RNA > 300 & nFeature_RNA < 10000)

sobj <- NormalizeData(sobj_filtered, normalization.method = 'LogNormalize', scale.factor = 10000) #default settings
sobj <- FindVariableFeatures(sobj, selection.method = 'vst', nFeatures = 2000)

#find top 10 variables
top10 <- head(VariableFeatures(sobj), 10)
top10_plot <- VariableFeaturePlot(sobj)
LabelPoints(plot = top10_plot, points = top10, rep1 = TRUE)

#scaling, correct for batch effects or cell cycle variations
all_genes <- rownames(sobj)
sobj <- ScaleData(sobj, features = all_genes) #can use new normalization workflow SCTransform; replaces NormalizeData(), ScaleData(), and FindVariableFeatures()
## store mitochondrial and ribosomal percentage in object meta data
sobj <- PercentageFeatureSet(sobj, pattern = "^MT-", col.name = "percent_mt")
sobj <- PercentageFeatureSet(sobj, pattern = "^RPS|^RPL", col.name = "percent_ribo")
## run sctransform
sobj <- SCTransform(sobj, vars.to.regress = c("percent_mt", "percent_ribo"), verbose = FALSE)
#or only mt
sobj <- SCTransform(sobj, vars.to.regress = "percent_mt", verbose = FALSE) #BiocManager::install('glmGamPoi') for faster estimation

view(sobj@assays$RNA)

#dimentionality reduction
sobj <- RunPCA(sobj, features = VariableFeatures(sobj))
print(sobj[['pca']], dims = 1:5, nfeatures = 5) #top 5 contributing genes to each PC
DimHeatmap(sobj, dims = 1, cells = 500, balanced = TRUE)
DimPlot(sobj, reduction = "pca") = NoLegend()

ElbowPlot(sobj) #how many PCs are enough for analysis

#Clustering
sobj <- FindNeighbors(sobj, dims = 1:15) #select the top 15 PCs
sobj <- FindClusters(sobj, resolution = c(0.1, 0.3, 0.5, 0.7, 1)) #the lower resolution the less clusters
view(sobj@meta.data)
DimPlot(sobj, group.by = 'RNA_ssn_res.1', label = TRUE)
Idents(sobj) <- 'RNA_ssn_res.0.1'

#identify markers of each cluster: https://satijalab.org/seurat/articles/pbmc3k_tutorial.html#finding-differentially-expressed-features-cluster-biomarkers
# find markers for every cluster compared to all remaining cells, report only the positive ones
sobj.markers <- FindAllMarkers(sobj, only.pos = TRUE)
sobj.markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1)
#for one cluster
#find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))
head(cluster5.markers, n = 5)

sobj <- RunUMAP(sobj, dims = 1:15)
DimPlot(sobj, reduction = 'umap')

#Assigning cell type identity to clusters
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
    "NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(sobj)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(sobj, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()

saveRDS(sobj, file = 'leukemia.RDS')

save(sobj,
     file = "D40.RData")

#save as h5ad
library(SeuratDisk)
SaveH5Seurat(sobj, filename = "D40.h5Seurat")
Convert("D40.h5Seurat", dest = "h5ad")
